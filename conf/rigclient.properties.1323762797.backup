#
# SAHARA Rig Client
#
# Software abstraction of physical rig to provide rig session control
# and rig device control. Automatically tests rig hardware and reports
# the rig status to ensure rig goodness.
#
# @license See LICENSE in the top level directory for complete license terms.
#
# Copyright (c) 2009 - 2011, University of Technology, Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the University of Technology, Sydney nor the names
#    of its contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @author Michael Diponio (mdiponio)
# @author Tania Machet    (tmachet)
# @author Tejaswini Deshpande (tdeshpan)
# @date 5th October 2009
#
###############################################################################
#                                                                             #
# Rig Client core configuration file. Format of each item is:                 #
#     # <Description> A description of the configuration item.                #
#     # <Name> <Type> Configuration key - Configuration value type            #
#     # <Example> Provided example of correct configuration                   #
#     Key <Value> Actual configuration                                        #
#                                                                             #
# NOTE: Key values and enumerated values ARE case sensitive.                  #
#                                                                             #
###############################################################################

###############################################################################
## Rig Identification                                                        ##
###############################################################################

# Uniquely identifies a rig within the remote laboratory.
# Rig_Type <String>
# Rig_Name test1
Rig_Name Rig_1

# Identifies the rig as an identical configuration of the same
# software and hardware. This means any rig in this type can be used in
# place of any other rig in the same type.
# Rig_Type <String>
# Rig_Type Rig_Type
Rig_Type Rig_Type

# A list of identifying tags which may be used to correlate rigs into collections
# to queue or book for. This allows, for example, multiple rig types to be
# collectively queued to get the first free rig in any of the rig types.
# Rig_Capabilites <String,...,String>
# Rig_Capabilites tag1,tag2,tag3
Rig_Capabilities tag1,tag2,tag3

# The fully qualified class name of the rig clients rig type class. This must
# implement the interface 'au.edu.uts.eng.remotelabs.rigclient.rig.IRig' but in
# practice most likely extends the abstract class
# 'au.edu.uts.eng.remotelabs.rigclient.rig.AbstractRig'. Two generic
# implementations exist that provide the required rig type class functionality.
# These are:
#
#     * au.edu.uts.eng.remotelabs.rigclient.rig.ConfiguredRig - Class
#        which is configured with the name of 'action' classes (classes
#        implementing interfaces that are run at certain session events);
#
#     * au.edu.uts.eng.remotelabs.rigclient.rig.ConfiguredControlledRig -
#       Similar class to the former but also implements the option rig client
#       control interface;
#
# Consult the 'Sahara Development Handbook' for further detail about rig type
# classes and how to create them.
# Rig_Class [au.edu.uts.eng.remotelabs.rigclient.rig.ConfiguredRig] | \
#           [au.edu.uts.eng.remotelabs.rigclient.rig.ConfiguredControlledRig] | \
#           <Class name>
# Rig_Class au.edu.uts.eng.remotelabs.rigclient.rig.ConfiguredControlledRig
Rig_Class au.edu.uts.eng.remotelabs.rigclient.rig.ConfiguredControlledRig

# The IP address of the machine the Rig Client is running on. This is needed
# if the Rig Client machine has multiple network interfaces and you want to
# ensure the external IP address is transmitted as the communication address.
# If left empty, the address of the first iterated network device is used.
# Rig_Client_IP_Address <IP>|<hostname>|empty
# Rig_Client_IP_Address
#Rig_Client_IP_Address

# The name of the network interface of the Rig Client is listening on. This is
# needed if the Rig Client machine has multiple network interfaces and you want
# a specific network interface to be used. This may be used in preference to
# the 'Rig_Client_IP_Address' property as it allows a specific network interface
Rig_Client_IP_Address 
# to be used while still detecting the IP address at runtime
# (i.e. Supports DHCP).
# Listening_Network_Interface <String>|empty
# Listening_Network_Interface
#Listening_Network_Interface
Listening_Network_Interface 

# The port number the Rig Client server is to listen on. This must be externally
# accessible by the Scheduling Server.
# Listening_Port <int>
# Listening_Port 8080
Listening_Port 8081

###############################################################################
## Scheduling Server Communication                                           ##
###############################################################################

# The address of the Scheduling Server. This can be the host name or the IP
# address of the computer the Scheduling Server is running on.
# Scheduling_Server_Address <String>
# Scheduling_Server_Address localhost
Scheduling_Server_Address localhost

# The port number the Scheduling Server is listening on.
# Scheduling_Server_Port <int>
# Scheduling_Server_Port 80
Scheduling_Server_Port 8080

# The time in seconds between sending status updates from the Rig Client
# to Scheduling Server.
# Scheduling_Server_Update_Period <int> seconds
# Scheduling_Server_Update_Period 30
Scheduling_Server_Update_Period 30


###############################################################################
## Miscellaneous Properties                                                  ##
###############################################################################

# The number of concurrent requests the Rig Client can service. If there are
# more than this number of requests, the extra requests are queued.
# Concurrent_Requests <int>
# Concurrent_Requests 50
Concurrent_Requests 10

# The threshold indicating how many times an action can fail before the rig
# is put off line.
# Action_Failure_Threshold <int>
# Action_Failure_Threshold 3
Action_Failure_Threshold 5

# The Rig Client can perform 'allocation' synchronously where the
# allocation is run then a response is returned to the Scheduling Server or
# asynchronously where an immediate response is provided then a subsequent
# call-back sent. This is because allocation may be a lengthy process and take
# longer than the Scheduling Server request time out which will cause allocation
# to fail. This property specifies whether allocation is forced to be
# asynchronous. If not, allocation is by default synchronous but may be requested
# by the Scheduling Server to be asynchronous which will occur depending on the
# 'Ignore_Async_Allocation_Request' value.
# Force_Async_Allocation [true|false]
# Force_Async_Allocation false
Force_Async_Allocation false

# As with the property 'Force_Async_Allocation' for allocation, this
# specifies whether 'release' is forced to be asynchronous. If not, release
# is by default synchronous but may be requested by the Scheduling Server to be
# asynchronous which will occur depending on the
# 'Ignore_Async_Release_Request' value.
# Force_Async_Release [true|false]
# Force_Async_Release false
Force_Async_Release false

# The Scheduling Server can request allocation to be performed asynchronously.
# This property specifies whether a request to perform asynchronous allocation
# is honoured. The default behaviour is to honour a request to perform
# asynchronous allocation.
# Ignore_Async_Allocation_Request [true|false]
# Ignore_Async_Allocation_Request false
Ignore_Async_Allocation_Request false

# As with the property `\verb|Ignore_Async_Allocation_Request|' for allocation,
# this specifies whether a request to perform release asynchronously is honoured.
# The default behaviour is to honour a request to perform asynchronous release.
# Ignore_Async_Release_Request [true|false]
# Ignore_Async_Release_Request false
Ignore_Async_Release_Request false

# The time at which the laboratory 'light' time starts. The light time is
# when the test frequency is set to be the specified test run interval for
# tests which enable light-dark exerciser scheduling. The time should be
# configured in 24 hour time with a column ':' between the hours and
# minute portions. The default light time is 09:00.
# Test_Light_Time <hour>:<minute>
# Test_Light_Time 09:00
Test_Light_Time 7:00

# The time at which the laboratory 'dark' time starts. The dark time is
# when the test frequency is set to be the specified test run interval
# multiplied by the specified dark time factor for exerciser tests which
# enable light-dark exerciser scheduling. It is the test which specifies
test var
# the dark time factor. The time should be configured with 24 hour time
# with a column ':' between the hours and minute portions. The default
# dark time is 18:00.
# Test_Dark_Time <hour of day>:<minute>
# Test_Dark_Time 18:00
Test_Dark_Time 19:00

###############################################################################
## Administrative Interface                                                  ##
###############################################################################

# The username to login to the administrative web interface. If this is not
# configured the default username is 'admin'.
# Admin_Username <String>
# Admin_Username admin
Admin_Username admin

# The password to login to the administrative web interface. If this is not
# configured the default password is 'passwd'.
# Admin_Password <String>
# Admin_Password passwd
Admin_Password passwd

