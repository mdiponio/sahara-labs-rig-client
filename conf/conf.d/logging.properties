#
# SAHARA Rig Client
#
# Software abstraction of physical rig to provide rig session control
# and rig device control. Automatically tests rig hardware and reports
# the rig status to ensure rig goodness.
#
# @license See LICENSE in the top level directory for complete license terms.
#
# Copyright (c) 2009 - 2010, University of Technology, Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the University of Technology, Sydney nor the names
#    of its contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @author Michael Diponio (mdiponio)
# @author Tania Machet    (tmachet)
# @author Tejaswini Deshpande (tdeshpan)
# @date 6th October 2010
#

###############################################################################
## Logging configuration                                                     ##
###############################################################################

# The logging subsystem which specifies where logs are persisted to. The
# following logging types are implemented:
#
#    * SystemErr - logs messages to the process standard error stream;
#    * File - logs messages to a plain text file and is susceptible to
#             log file bloat;
#    * RolledFile - logs messages to a plain text file and is rolled
#                   when it reaches a configured size;
#    * Syslog - logs messages to a Syslog server;
#    * WinEvents - logs messages to the Windows Event Log.
#
# NOTE: The WinEvents logger only runs on Windows and requires the file
# 'NTEventLogAppender.dll' to placed in PATH.
# Logger_Type [SystemErr | File | RolledFile | Syslog | WinEvents]
# Logger_Type RolledFile
Logger_Type RolledFile

# The level of log messages that are logged. Configuring a more verbose log
# level will print that log levels messages and the preceding less verbose
# log levels. The log levels that may be configured  in order of least
# verbosity are:
#
#    * ERROR - Messages that are generated by events that cause unexpected \
#              results and stop the expected program execution sequence.
#    * WARN - Messages that are generated by events that cause undesired \
#             results but do not stop the expected program execution sequence.
#    * INFO - Messages that are generated by events that are regular in \
#             occurrence, however are useful for audit trails.
#    * DEBUG - Messages specifying program execution and progression.
# Log_Level [ERROR | WARN | INFO | DEBUG]
# Log_Level INFO
Log_Level WARN

# The name of the text file the 'File' and 'RolledFile' loggers log to.
# Log_File_Name <String>
# Log_File_Name rigclient.log
Log_File_Name rigclient.log

# Maximum file size for the rolled file logger log file in megabytes.
# Log_File_Max_Size <int>
# Log_File_Max_Size 10
Log_File_Max_Size 10

# Maximum number of backups for the rolled file logger log file backups. After
# the maximum number of backups is exceeded, the oldest log backup file is
# deleted..
# Log_File_Backups <int>
# Log_File_Backups 5
Log_File_Backups 5

# Syslog host - The host name or IP of the Syslog server.
# Syslog_Host <host>
# Syslog_Host 127.0.0.1
#Syslog_Host 127.0.0.1

# Syslog log local facility number to use (between 1 to 7).
# Syslog_Local_Facility_Num <int between 1 and 7 inclusive)
# Syslog_Local_Facility_Num 1
#Syslog_Local_Facility_Num 1

# The format of the log messages can be specifying by providing a format
# string with macros which are be replaced by their actual values.
# The following is a list of macros that may be put in format strings.
#      * __MESSAGE__  - Actual message
#      * __LEVEL__    - Logging level (FATAL, PRIORITY, ..., DEBUG)
#      * __TIME__     - Time with hour of day:minute:second
#      * __DATE__     - Date with day:month:year
#      * __ISO8601__  - ISO 8601 formatted date
#      * __CLASS__    - Class where the message originated
#      * __METHOD__   - Method where the message originated
#      * __SOURCE__   - Source file where the message originated
#      * __LINE_NUM__ - Line number where the message originated
#      * __TID__      - Thread id where the message orginated

# Default log format - the default format of logging messages is used for
# those levels which do not provide their own logging format
# Default_Log_Format <format string>
# Default_Log_Format [__LEVEL__] - [__ISO8601__] - __MESSAGE__
Default_Log_Format [__LEVEL__] - [T__TID__] - [__ISO8601__] - __MESSAGE__

# Fatal log format specific to fatal log messages.
# FATAL_Log_Format <format string>
# FATAL_Log_Format [FATAL] - [__ISO8601__] - __MESSAGE__
#FATAL_Log_Format [FATAL] - [__ISO8601__] - __MESSAGE__

# Priority log format specific to priority log messages.
# PRIORITY_Log_Format <format string>
# PRIORITY_Log_Format [FATAL] - [__ISO8601__] - __MESSAGE__
#PRIORITY_Log_Format [PRIORITY] - [__ISO8601__] - __MESSAGE__

# Error log format specific to error log messages.
# ERROR_Log_Format <format string>
# ERROR_Log_Format [ERROR] - [__ISO8601__] - __MESSAGE__
#ERROR_Log_Format [ERROR] - [__ISO8601__] - __MESSAGE__

# Warn log format specific to warning log messages.
# WARN_Log_Format <format string>
# WARN_Log_Format [WARN] - [__ISO8601__] - __MESSAGE__
#WARN_Log_Format [WARN] - [__ISO8601__] - __MESSAGE__

# Info log format specific to informational log messages
# INFO_Log_Format <format string>
# INFO_Log_Format [INFO] - [__ISO8601__] - __MESSAGE__
#INFO_Log_Format [INFO] - [__ISO8601__] - __MESSAGE__

# Debug log format specific to debugging log messages
# DEBUG_Log_Format <format string>
# DEBUG_Log_Format [DEBUG] - [__ISO8601__] - __MESSAGE__ (__SOURCE__:__LINE_NUM__)
#DEBUG_Log_Format [DEBUG] - [__ISO8601__] - __MESSAGE__ (__SOURCE__:__LINE_NUM__)
