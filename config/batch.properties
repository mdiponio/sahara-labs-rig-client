#
# SAHARA Rig Client
# 
# Software abstraction of physical rig to provide rig session control
# and rig device control. Automatically tests rig hardware and reports
# the rig status to ensure rig goodness.
#
# @license See LICENSE in the top level directory for complete license terms.
#
# Copyright (c) 2009, University of Technology, Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice, 
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright 
#    notice, this list of conditions and the following disclaimer in the 
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the University of Technology, Sydney nor the names 
#    of its contributors may be used to endorse or promote products derived from 
#    this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @author Michael Diponio (mdiponio)
# @date 2nd November 2009
#
# Changelog:
# - 2/11/2009 - mdiponio - Initial file creation.
#
###############################################################################
# Rig Client configured batch runner properties configuration file.           #
# Format of each item is:                                                     #
#     # <Description> A description of the configuration item.                #
#     # <Name> <Type> Configuration key - Configuration value type            #
#     # <Example> Provided example of correct configuration                   #
#     Key <Value> Actual configuration                                        #
#                                                                             #
# NOTE: Key values and enumerated values ARE case sensitive.                  #
###############################################################################

###############################################################################
# Macros - these can be used to inject run-time variables into configuration, #
#          when the macro string is entered into the property value string,   #
#          the run-time value is substited where the macro is placed.         #
#                                                                             #
# Macro list:                                                                 #
#   * __FILE__ - The absolute path of the uploaded instruction file.          #
#   * __USER__ - The username of the user who initiated batch control.        #
#   * __DAY_OF_MONTH__ - Current day of the month.                            #
#   * __MONTH__ - Current month in the year.                                  #
#   * __YEAR__ - ISO-8601 year number.                                        #
#   * __HOUR__ - 24-hour format of an hour with leading zeros.                #
#   * __MINUTE__ - 
#   * __SECOND__
#   * __ISO8601__
#   * __RFC2822__
#   * __EPOCH__
#                                                                             #
# NOTE: The macro name is prefixed and suffixed with two underscores.         #
###############################################################################

###############################################################################
## Instruction File Sanity Checks                                            ##
###############################################################################
#
# Instruction file sanity checks ensure the uploaded instruction is 
# applicable to what the batch process may run. The configured batch runner 
# contains three such file sanity tests which may be run:
#
#     * File extension - if the uploaded file extension matches the configured
#               file extension
#     * File magic number - if the uploaded file magic number (a value in up to
#               the first eight bytes) matches the configured magic number.
#     * File maximum size - if the uploaded file size is less than the 
#               configured maximum file size.

# Whether to test the instruction file extension. If this is set to true,
# File_Extension property must be set. The default value is false to specify
# not to test a file extension.
# Test_File_Extension [true|false]
# Test_File_Extension true
Test_File_Extension true

# Instruction file extension. Should be configured as a string specified the
# characters of the file extension. The file extension test will check if the 
# instruction file name ends with the configured extension.
# File_Extension <String>
# File_Extension tar.gz
File_Extension .tar.gz

# Whether to test for instruction file maximum size. If this is set to true,
# the File_Size property must be set with the maximum permissible instruction
# file size. The default value is false to specify not to test for file 
# size.
# Test_Max_File_Size [true|false]
# Test_Max_File_Size true
Test_Max_File_Size true

# Maximum file size of the instruction file in kilobytes.
# Max_File_Size <int>
# Max_File_Size 1024
Max_File_Size 1024

# Whether to test the instruction file for magic number. From the oracle of 
# all knowledge (Wikipedia!), magic numbers are common in programs across many
# operating systems. Magic numbers implement strongly typed data and are a form
# of in-band signalling to the controlling program that reads the data type(s)
# at program run-time. Many files have such constants that identify the 
# contained data. Detecting such constants in files is a simple and effective 
# way of distinguishing between many file formats and can yield further run-time 
# information.
# If this is set top true, the File_Magic_Number property must be set with a
# hexadecimal representation of the file magic number. The default value is
# false to specify not to test for file magic number.
# Test_Magic_Number [true|false]
# Test_Magic_Number true
Test_Magic_Number true

# File magic number in hexadecimal format. The prefix '0x' is optional.
# File_Magic_Number <hex>
# File_Magic_Number 0xCAFEBABE
File_Magic_Number 0xCAFEBABE

###############################################################################
## File Synchronisation                                                      ##
###############################################################################

# Whether to synchronise the results directory (batch process working directory
# to the another directory. If true, the results directory is copied to a
# different directory. 
# Sync_Results_Dir [true|false]
# 
Sync_Results_Dir

Sync_Dir_Destination

Compress_Dir 


