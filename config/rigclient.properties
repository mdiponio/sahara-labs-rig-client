#
# SAHARA Rig Client
# 
# Software abstraction of physical rig to provide rig session control
# and rig device control. Automatically tests rig hardware and reports
# the rig status to ensure rig goodness.
#
# @license See LICENSE in the top level directory for complete license terms.
#
# Copyright (c) 2009, University of Technology, Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice, 
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright 
#    notice, this list of conditions and the following disclaimer in the 
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the University of Technology, Sydney nor the names 
#    of its contributors may be used to endorse or promote products derived from 
#    this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @author Michael Diponio (mdiponio)
# @date 5th October 2009
#
# Changelog:
# - 5/10/2009 - mdiponio - Initial file creation.
#
###############################################################################
# Rig Client core configuration file. Format of each item is:                 #
#     # <Description> A description of the configuration item.                #
#     # <Name> <Type> Configuration key - Configuration value type            #
#     # <Example> Provided example of correct configuration                   #
#     Key <Value> Actual configuration                                        #
#                                                                             #
# NOTE: Key values and enumerated values ARE case sensitive.                  #
###############################################################################

###############################################################################
## Rig Identification                                                        ##
###############################################################################

# Rig name - uniquely identifies a rig in a local remote laboratory
# Rig_Type <String>
# Rig_Name fpga1
Rig_Name fpga1

# Rig type - identifies the rig as an instance of a fungible replacement
# of a common hardware and software configuration
# Rig_Type <String>
# Rig_Type fpga
Rig_Type fpga

# Rig capabilities - tokens identifying a descriptive identifier of a rig
# attribute. This is a comma separated list of tokens.
# Rig_Capabilites <String,...,String>
# Rig_Capabilites spartan2e,xilinx
Rig_Capabilites spartan2e,xilinx

# Rig class - qualified class name of rig type class implementing rig client
# required methods. Must be derived class of au.edu.uts.eng.remotelabs.rigclient.rig.IRig)
# Rig_Class <String>
# Rig_Class au.edu.uts.eng.remotelabs.rigclient.fpga.FpgaRig
Rig_Class au.edu.uts.eng.remotelabs.rigclient.fpga.FpgaRig

###############################################################################
## Logging configuration                                                     ##
###############################################################################

# Logger type - either:
#      * SystemErr - logging messages printed to standard error stream
#      * File - logging messages printed to file (not rolled)
#      * RolledFile - logging messages printed to a rolled log file (TODO)
#      * Syslog - logging messages sent to Syslog server (TODO)
#      * WinEvents - logging messages sent to the Windows Event Log (TODO)
# Logger_Type [SystemErr | File | RolledFile | Syslog | WinEvents]
# Logger_Type SystemErr
Logger_Type SystemErr

# Logging level - either (in order of verbosity)
#      * ERROR - Messages that are generated by events that cause unexpected \ 
#                results and stop the expected program execution sequence.
#      * WARN - Messages that are generated by events that cause undesired \ 
#               results but do not stop the expected program execution sequence.
#      * INFO - Messages that are generated by events that are regular in \
#               occurrence, however are useful for audit trails.
#      * DEBUG - Messages specifying program execution and progression.
# Note: FATAL and PRIORITY are always logged.
# Log_Level [ERROR | WARN | INFO | DEBUG]
# Log_Level DEBUG
Log_Level DEBUG

# Log file name that are logged messages are appended to (for File and RolledFile)
# Log_File_Name <String>
# Log_File_Name /home/mdiponio/rigclient.log
Log_File_Name /home/mdiponio/rigclient.log

# Clean up batch invocation generated files.
# Clean_Up_Batch [true|false]
Clean_Up_Batch true
