#
# SAHARA Rig Client
# 
# Software abstraction of physical rig to provide rig session control
# and rig device control. Automatically tests rig hardware and reports
# the rig status to ensure rig goodness.
#
# @license See LICENSE in the top level directory for complete license terms.
#
# Copyright (c) 2009, University of Technology, Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice, 
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright 
#    notice, this list of conditions and the following disclaimer in the 
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the University of Technology, Sydney nor the names 
#    of its contributors may be used to endorse or promote products derived from 
#    this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @author Michael Diponio (mdiponio)
# @date 5th October 2009
#
# Changelog:
# - 5/10/2009 - mdiponio - Initial file creation.
#
###############################################################################
# Rig Client core configuration file. Format of each item is:                 #
#     # <Description> A description of the configuration item.                #
#     # <Name> <Type> Configuration key - Configuration value type            #
#     # <Example> Provided example of correct configuration                   #
#     Key <Value> Actual configuration                                        #
#                                                                             #
# NOTE: Key values and enumerated values ARE case sensitive.                  #
# Also NOTE: The rig client is not very defensive for valid configuration so  #
# if the expected configuration value type is specified as an int or integer  #
# and you don't put a valid integer as the value, tough, the rig client will  #
# most likely crash. You have been warned!                                    #
###############################################################################

###############################################################################
## Rig Identification                                                        ##
###############################################################################

# Rig name - uniquely identifies a rig in a local remote laboratory
# Rig_Type <String>
# Rig_Name fpga1
Rig_Name fpga1

# Rig type - identifies the rig as an instance of a fungible replacement
# of a common hardware and software configuration
# Rig_Type <String>
# Rig_Type fpga
Rig_Type fpga

# Rig capabilities - tokens identifying a descriptive identifier of a rig
# attribute. This is a comma separated list of tokens.
# Rig_Capabilites <String,...,String>
# Rig_Capabilites spartan2e,xilinx
Rig_Capabilites spartan2e,xilinx

# Rig class - qualified class name of rig type class implementing rig client
# required methods. Must be derived class of au.edu.uts.eng.remotelabs.rigclient.rig.IRig)
# Rig_Class <String>
# Rig_Class au.edu.uts.eng.remotelabs.rigclient.rig.configuredRig
Rig_Class au.edu.uts.eng.remotelabs.rigclient.rig.ConfiguredRig

###############################################################################
## Rig Communication                                                         ##
###############################################################################

# Listening port - the TCP port the rig client is to listen for communication 
# requests.
# Listening_Port <int>
# Listening_Port 8080
Listening_Port 8080

###############################################################################
## Logging configuration                                                     ##
###############################################################################

# Logger type - either:
#      * SystemErr - logging messages printed to standard error stream
#      * File - logging messages printed to file (not rolled)
#      * RolledFile - logging messages printed to a rolled log file (TODO)
#      * Syslog - logging messages sent to Syslog server (TODO)
#      * WinEvents - logging messages sent to the Windows Event Log (TODO)
# Logger_Type [SystemErr | File | RolledFile | Syslog | WinEvents]
# Logger_Type SystemErr
Logger_Type SystemErr

# Logging level - either (in order of verbosity)
#      * ERROR - Messages that are generated by events that cause unexpected \ 
#                results and stop the expected program execution sequence.
#      * WARN - Messages that are generated by events that cause undesired \ 
#               results but do not stop the expected program execution sequence.
#      * INFO - Messages that are generated by events that are regular in \
#               occurrence, however are useful for audit trails.
#      * DEBUG - Messages specifying program execution and progression.
# Note: FATAL and PRIORITY are always logged.
# Log_Level [ERROR | WARN | INFO | DEBUG]
# Log_Level DEBUG
Log_Level DEBUG

# Log file name that are logged messages are appended to (for File and RolledFile)
# Log_File_Name <String>
# Log_File_Name /home/mdiponio/rigclient.log
Log_File_Name /home/mdiponio/rigclient.log

###############################################################################
## Batch Control Configuration                                               ##
###############################################################################

# Batch timeout in seconds. Time to wait at batch startup before failing 
# batch control, if the batch process has not started. The default is 60
# seconds.
# Batch_Timeout <int>
# Batch_Timeout 60
Batch_Timeout 60

# Batch termination timeout in seconds. Time to wait before returning a 
# batch termination success or failure result.  The default is 10 seconds.
# Batch_Termination_TimeOut <int>
# Batch_Termination_TimeOut 10
Batch_Termination_TimeOut 10

# Batch process working directory. If this is is set to null, the working
# directory is taken to be the System temporary directory. The default is
# null.
# Batch_Working_Dir [<Path>|null]
# Batch_Working_Dir /var/rigclient/batch
Batch_Working_Dir null

# Don't create a nested working directory. If this is set to true, a new 
# directory is created in the batch working directory and the batch 
# processes working directory is set as the new directory. The default is 
# true.
# Batch_Created_Nested_Dir [true|false]
# Batch_Created_Nested_Dir true
Batch_Create_Nested_Dir true

# Batch clean up. If this is set to true, the batch control invocation generated
# files are deleted. This setting is only honoured if the property
# Batch_Create_Nester_Dir property is set to true. If not, it is 
# ignored and no clean up occurs. The default is false.
# Batch_Clean_Up [true|false]
# Batch_Clean_Up false
Batch_Clean_Up false

# Specifies if the batch process should inherit the environment variables. If
# true, no inherited environment variables will be given to the batch process
# unless they are set up manually. The default value is false.
# Batch_Flush_Env [true|false]
# Batch_Flush_Env false
Batch_Flush_Env false

# Specifies if the uploaded instruction should be deleted upon completion of 
# batch execution. If true, the uploaded batch instruction file is deleted.
# The default value is true.
# Batch_Instruct_File_Delete [true|false]
# Batch_Instruct_File_Delete true
Batch_Instruct_File_Delete false

###############################################################################
## Primitive Control Configuration                                           ##
###############################################################################

# The package names to find primitive controller classes. Class name resolution,
# works by first trying to resolve the transmitted controller name. If the
# transmitted controller fails, it is appended to a configured package name 
# and resolution is attempted again. Multiple prefixes may be configured
# using the ';' character to separate the package prefixes.
# Package_Prefixes <package.1>;<package.2>;<package.3>
# Package_Prefixes au.edu.uts.eng.remotelabs.civil2;au.edu.uts.eng.remotelabs.fpga
Package_Prefixes au.edu.uts.eng.remotelabs.civil2;au.edu.uts.eng.remotelabs.fpga

###############################################################################
## Configured Rig Type Configuration (ConfiguredRig|ConfiguredControllerRig) ## 
###############################################################################

# A configured rig determines required action instances from configuration.

# The package names to find action interface classes. Fully qualified action
# class names may be used and if this fails, the configured packages are
# checked. Multiple packages may be configured, separating each package with
# a ';' character.
# Package_Prefixes <package.1>;<package.2>;<package.3>
# Package_Prefixes au.edu.uts.eng.remotelabs.rigclient.commons
Action_Package_Prefixes au.edu.uts.edu.remotelabs.rigclient.commons 

# The list of access actions to load. Multiple access actions can be 
# configured, separating each with a ';' character.
# Access_Actions [Class];[Class];[Class]
# Access_Actions RDPAccessAction
Access_Actions access.RDPAccessAction

# The list of slave access actions to load. Multiple slave access actions can
# be configured, separating each with a ';' character.
# Slave_Access_Actions [Class];[Class];[Class]
# Slave_Access_Actions VNCSlaveAccessAction
Slave_Access_Actions slave.VNCSlaveAccessAction

# The list of notification actions to load. Multiple notification actions can 
# be configured, separating each with a ';' character.
# Notify_Actions [Class];[Class];[Class]
# Notify_Actions NotifyAction
Notify_Actions notify.Action

# The list of detection actions to load. Multiple detection actions can 
# be configured, separating each with a ';' character.
# Detection_Actions [Class];[Class];[Class]
# Detection_Actions PingTestAction
Detection_Actions detect.RDPLoginActivityDetectActions

# The list of reset actions to load. Multiple reset actions can 
# be configured, separating each with a ';' character.
# Reset_Actions [Class];[Class];[Class]
# Reset_Actions PowerCycleResetAction
Reset_Actions reset.PowerCycleResetAction

# The list of test actions to load. Multiple test actions can 
# be configured, separating each with a ';' character.
# Test_Actions [Class];[Class];[Class]
# Test_Actions PingTestAction
Test_Actions test.PingTestAction
