#
# Sahara Rig Client
# 
# Software abstraction of physical rig to provide rig session control
# and rig device control. Automatically tests rig hardware and reports
# the rig status to ensure rig goodness.
#
# @copyright 2009 LabShare Australia
# @license See LICENSE in the top level directory for complete license terms.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not 
# use this file except in compliance with the License. You may obtain a copy 
# of the License at: 
#      http://www.apache.org/licenses/LICENSE-2.0 
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
# CONDITIONS OF ANY KIND, either express or implied. See the License for the specific 
# language governing permissions and limitations under the License. 
#
# @author Michael Diponio (mdiponio)
# @date <day> <month> 2009
#
# Changelog:
# - 05/10/2009 - mdiponio - Initial file creation.
#

###############################################################################
# Rig Client core configuration file. Format of each item is:                 #
#     # <Description> A description of the configuration item.                #
#     # <Name> <Type> Configuration key - Configuration value type            #
#     # <Example> Provided example of correct configuration                   #
#     Key <Value> Actual configuration                                        #
#                                                                             #
# NOTE: Key values and enumerated values ARE case sensitive.                  #
###############################################################################

###############################################################################
## Rig Identification                                                        ##
###############################################################################

# Rig name - uniquely identifies a rig in a local remote laboratory
# Rig_Type <String>
# Rig_Name fpga1
Rig_Name fpga1

# Rig type - identifies the rig as an instance of a fungible replacement
# of a common hardware and software configuration
# Rig_Type <String>
# Rig_Type fpga
Rig_Type fpga

# Rig capabilities - tokens identifying a descriptive identifier of a rig
# attribute. This is a comma separated list of tokens.
# Rig_Capabilites <String,...,String>
# Rig_Capabilites spartan2e,xilinx
Rig_Capabilites spartan2e,xilinx

# Rig class - qualified class name of rig type class implementing rig client
# required methods. Must be derived class of au.edu.uts.eng.remotelabs.rigclient.rig.IRig)
# Rig_Class <String>
# Rig_Class au.edu.uts.eng.remotelabs.rigclient.fpga.FpgaRig
Rig_Class au.edu.uts.eng.remotelabs.rigclient.fpga.FpgaRig

###############################################################################
## Logging configuration                                                     ##
###############################################################################

# Logger type - either:
#      * SystemErr - logging messages printed to standard error stream
#      * File - logging messages printed to file (not rolled)
#      * RolledFile - logging messages printed to a rolled log file (TODO)
#      * Syslog - logging messages sent to Syslog server (TODO)
#      * WinEvents - logging messages sent to the Windows Event Log (TODO)
# Logger_Type [SystemErr | File | RolledFile | Syslog | WinEvents]
# Logger_Type SystemErr
Logger_Type SystemErr

# Logging level - either (in order of verbosity)
#      * ERROR - Messages that are generated by events that cause unexpected \ 
#                results and stop the expected program execution sequence.
#      * WARN - Messages that are generated by events that cause undesired \ 
#               results but do not stop the expected program execution sequence.
#      * INFO - Messages that are generated by events that are regular in \
#               occurrence, however are useful for audit trails.
#      * DEBUG - Messages specifying program execution and progression.
# Note: FATAL and PRIORITY are always logged.
# Log_Level [ERROR | WARN | INFO | DEBUG]
# Log_Level DEBUG
Log_Level DEBUG

# Log file name that are logged messages are appended to (for File and RolledFile)
# Log_File_Name <String>
# Log_File_Name /home/mdiponio/rigclient.log
Log_File_Name /home/mdiponio/rigclient.log
